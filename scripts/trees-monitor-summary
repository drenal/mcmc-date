#!/usr/bin/env cabal
{- cabal:
  build-depends:
    attoparsec
    , base
    , bytestring
    , comonad
    , elynx-tree
    , filepath
    , matrices
    , statistics
    , vector
  ghc-options: -Wall
-}
{-# LANGUAGE OverloadedStrings #-}

import Data.Attoparsec.ByteString
import Data.Bifunctor
import Data.Maybe
import qualified Data.ByteString.Char8 as BS
import qualified Data.ByteString.Lazy.Char8 as BL
import Data.List hiding (sort)
import qualified Data.Vector.Unboxed as VU
import qualified ELynx.Topology as T
import ELynx.Tree
import Statistics.Sample
import System.Environment
import System.FilePath

getTree :: BS.ByteString -> Tree Length Name
getTree l =
  either error id $
    toLengthTree $
      either error id $
        parseOnly (oneNewick Standard) $
          BS.split '\t' l !! 4

toNewickTopology :: T.Topology Name -> BL.ByteString
toNewickTopology =
  toNewick
    . first (const $ Phylo Nothing Nothing)
    . T.toBranchLabelTreeWith (0 :: Int) ""

checkTopologies :: [Tree e Name] -> IO ()
checkTopologies ts = do
  putStrLn "Check if topologies of the trees in the tree list are equal."
  putStrLn "Topology AND sub tree orders need to match."
  let differentTopologies = nub $ map T.fromBranchLabelTree ts
  if length differentTopologies == 1
    then putStrLn "OK."
    else do
      putStrLn "Trees have different topologies:"
      BL.putStrLn $ BL.unlines $ map toNewickTopology differentTopologies
      error "A single topology is required."

scale :: Double -> (Double, Double) -> (Double, Double)
scale c (m, v) = (m * c, v * c * c)

getMeanVarianceTrees :: Double -> [Tree Length Name] -> (Tree Length Name, Tree Length Name)
getMeanVarianceTrees meanRate xs =
  (fromJust $ setBranches (map toLengthUnsafe ms) x,
   fromJust $ setBranches (map toLengthUnsafe vs) x)
  where
    x = head xs
    bss :: [[Double]]
    bss = transpose $ map (branches . first fromLength) xs
    (ms, vs) = (unzip $ map (scale meanRate . meanVariance . VU.fromList) bss) :: ([Double], [Double]) 

main :: IO ()
main = do
  as <- getArgs
  pn <- getProgName
  let (fn, bi, meanRate) = case as of
        [x, b, m] -> (x, read b, read m) :: (String, Double, Double)
        _ ->
          let msg =
                unlines
                  [ "Usage: " <> pn <> " MONITORFILE BURNIN MEAN_RATE",
                    "For example: " <> pn <> " analysis.ratetree.monitor 0.2 1e-9"               
                  ]
           in error msg
  c <- BS.readFile fn
  let lns = BS.lines c
      trs' = map getTree $ tail lns
      -- Remove burn in.
      l = length trs'
      toDrop = round (fromIntegral l * bi) :: Int
      trs = drop toDrop trs'
  checkTopologies trs
  let (meanTree, varianceTree) = getMeanVarianceTrees meanRate trs
      fnMeanTree = dropExtension fn ++ ".tree.mean"
      fnVarianceTree = dropExtension fn ++ ".tree.variance"
  BL.writeFile fnMeanTree $ toNewick $ lengthToPhyloTree meanTree
  BL.writeFile fnVarianceTree $ toNewick $ lengthToPhyloTree varianceTree
